openapi: 3.0.0
info:
  title: MEN REST API
  description: MongoDB ExpressJS NodeJS REST API
  version: 1.0.0
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server 
components:
  schemas:
    Workspace:
      type: object
      properties:
        workspaceId:
          type: number
        name:
          type: string
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string

  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: auth-token

paths:
  /api/welcome:
    get:
      summary: Welcome Message
      description: Returns a welcome message.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /api/user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /api/user/login:
    post:
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string

  /api/workspace:
    get:
      summary: Get all Workspaces
      description: Retrieves a list of all Workspaces.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workspace"

    post:
      summary: Create a new Workspace
      description: Create a new Workspace
      security:
        - ApiKeyAuth: []      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"

      responses:
        201:
          description: Workspace created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
  
  /api/workspace/{workspaceId}:
    put:
      summary: Update a specific Workspace
      description: Update a specific Workspace based on its id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: workspaceId
          required: true
          description: MongoDB id of the Workspace
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"

      responses:
        200:
          description: Workspace updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"

    delete:
      summary: Delete a specific Workspace
      description: Delete a specific Workspace based on its id
      security:
        - ApiKeyAuth: []            
      parameters:
        - in: path
          name: workspaceId
          required: true
          description: MongoDB id of the Workspace
          schema:
            type: string

      responses:
        204:
          description: Workspace deleted successfully
